library(tidyverse)
game = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 5000) {
if (rbinom(1,1,.5)==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(turn_bust)
}
busted_turns = c()
for (i in 1:10000) {
busted_turns[i] = game(1000, 100)[1]
}
sum(busted_turns < 100) / length(busted_turns)
sum(busted_turns < 500) / length(busted_turns)
mean(busted_turns)
game2 = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 100) {
if (rbinom(1,1,.5)==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(c(turn_bust, startmoney))
}
money100hands = c()
for (i in 1:10000) {
money100hands[i] = game2(1000, 100)[2]
}
mean(money100hands)
var(money100hands)
game3 = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 500) {
if (rbinom(1,1,.5)==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(c(turn_bust, startmoney))
}
money500hands = c()
for (i in 1:10000) {
money500hands[i] = game2(1000, 100)[2]
}
mean(money500hands)
var(money500hands)
game3 = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 500) {
if (rbinom(1,1,.5)==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(c(turn_bust, startmoney))
}
money500hands = c()
for (i in 1:10000) {
money500hands[i] = game3(1000, 100)[2]
}
mean(money500hands)
var(money500hands)
?sample
chain_game = function (wager, baseprob, plusprob, hands) {
turn = 1
winnings = 0
startprob = baseprob
while (turn <= hands){
if (rbinom(1, 1, startprob) == 1){
winnings = winnings + wager
if (startprob + plusprob <= 1){
startprob = startprob + plusprob
} else {
startprob = 1
}
turn = turn + 1
} else {
winnings = winnings - wager
startprob = baseprob
turn = turn +1
}
}
return(winnings)
}
chain_game(100, .48, .01, 100000)
chains100 = replicate(100, chain_game(100, .48, .01, 100000))
mean(chains100)
?quantile
boot_ci =function(data, func, reps =1000, lower=.025, upper=.975) {
stat_vect = replicate(reps, func(sample(data, size = length(data), replace = TRUE)))
low = quantile(stat_vect, probs = c(lower, upper))
return (low)
}
boot_ci =function(data, func, reps =1000, lower=.025, upper=.975) {
stat_vect = replicate(reps, func(sample(data, size = length(data), replace = TRUE)))
low = quantile(stat_vect, probs = c(lower, upper))
return (low)
}
boot_ci(replicate(100, chain_game(100, i, .01, 100000)), func = var)
chain_game = function (wager, baseprob, plusprob, hands) {
turn = 1
winnings = 0
startprob = baseprob
while (turn <= hands){
if (rbinom(1, 1, startprob) == 1){
winnings = winnings + wager
if (startprob + plusprob <= 1){
startprob = startprob + plusprob
} else {
startprob = 1
}
turn = turn + 1
} else {
winnings = winnings - wager
startprob = baseprob
turn = turn +1
}
}
return(winnings)
}
boot_ci(replicate(100, chain_game(100, .485, .01, 100000)), func = var)
boot_ci(replicate(100, chain_game(100, .482, .01, 100000)), func = var)
boot_ci(replicate(100, chain_game(100, .48, .01, 100000)), func = var)
roulette = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 5000) {
if (rbinom(1,1, (18/38))==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(turn_bust)
}
busted_turns = c()
for (i in 1:10000) {
busted_turns[i] = game(1000, 100)[1]
}
roulette = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 5000) {
if (rbinom(1,1, (18/38))==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(turn_bust)
}
busted_turns = c()
for (i in 1:10000) {
busted_turns[i] = game(1000, 100)
}
roulette = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 5000) {
if (rbinom(1,1, (18/38))==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(turn_bust)
}
roulette_busted = c()
for (i in 1:10000) {
busted_turns[i] = game(1000, 100)
}
roulette = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 5000) {
if (rbinom(1,1, (18/38))==1) {
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(turn_bust)
}
roulette_busted = c()
for (i in 1:10000) {
roulette_busted[i] = game(1000, 100)
}
sum(roulette_busted < 100) / length(busted_turns)
sum(roulette_busted < 500) / length(busted_turns)
mean(roulette_busted)
rgame2 = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 100) {
if (rbinom(1,1,(18/38)==1) {
rgame2 = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 100) {
if (rbinom(1,1,(18/38)==1) {
rgame2 = function(startmoney, bet) {
turn_bust = 1
while (startmoney > 0 & turn_bust < 100) {
if (rbinom(1,1,(18/38)==1){
rgame2 = function(startmoney, bet){
turn_bust = 1
while (startmoney > 0 & turn_bust < 100){
if (rbinom(1,1,(18/38)==1){
rgame2 = function(startmoney, bet){
turn_bust = 1
while (startmoney > 0 & turn_bust < 100){
if (rbinom(1,1,(18/38)) ==1){
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(c(turn_bust, startmoney))
}
roul100hands = c()
for (i in 1:10000) {
roul100hands[i] = rgame2(1000, 100)[2]
}
mean(roul100hands)
var(roul100hands)
rgame3 = function(startmoney, bet){
turn_bust = 1
while (startmoney > 0 & turn_bust < 500){
if (rbinom(1,1,(18/38)) ==1){
startmoney = startmoney + bet
turn_bust = turn_bust + 1
} else {
startmoney = startmoney - bet
turn_bust = turn_bust + 1
}
}
return(c(turn_bust, startmoney))
}
roul500hands = c()
for (i in 1:10000) {
roul500hands[i] = rgame2(1000, 100)[2]
}
mean(roul500hands)
var(roul500hands)
boot_ci(replicate(100, chain_game(100, .485, .01, 100000)), func = var)
boot_ci(replicate(100, chain_game(100, .48, .0125, 100000)), func = var)
