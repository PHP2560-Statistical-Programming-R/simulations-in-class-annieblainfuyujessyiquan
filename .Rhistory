sim_bets <- function(num_bets, bank_start = 1000){
bank<-rep(NA,num_bets)
bank[1]<-bank_start
for (i in 2:num_bets){
bank[i] <- bank[i-1] + rbinom(1,1,0.5)*(200) - 100
if (bank[i]<=0){
break()
}
}
return(list(bets=i,bankroll=bank[i]))
}
bankruptcy <- function(num_bets, max_iterations = 5000){
n <- 0
for (i in 1:max_iterations){
if (sim_bets(num_bets)$bets < num_bets) {
n <- n + 1
}
}
n/max_iterations
}
bankruptcy(100)
bankruptcy(500)
mean(replicate(1000,sim_bets(5000)$bets))
mean(replicate(1000, sim_bets(100)$bankroll))
var(replicate(1000, sim_bets(100)$bankroll))
mean(replicate(1000, sim_bets(500)$bankroll))
var(replicate(1000, sim_bets(500)$bankroll))
sim_bets(5000)
replicate(1000,sim_bets(5000)$bets != 5000)
replicate(1000, sim_bets(5000)$bets)
df[df!=5000]
df[df!=5000]
df <- df[df!=5000]
df <- replicate(1000, sim_bets(5000)$bets)
df <- df[df!=5000]
df
mean(df)
mean(replicate(99, unfair_game(100000)))
unfair_game <- function(num_bets, p1 = .48, increase = .01){
bank <- rep(NA, num_bets+1)
bank[1] = 100
chance = p1
for(i in 1:num_bets+1) {
sample1 <-rbinom(1,1,chance)
bank[i] <- bank[i-1] + sample1*(200) - 100
if(chance < 1 & sample1 == 1) {
chance <- chance + increase
} else if (chance < 1 & sample1 == 0) {
chance <- p1
}
}
return(bank[num_bets+1])
}
mean(replicate(99, unfair_game(100000)))
.48+.5
.98/3
.98/2
min <- .48
max <- .50
fair_mean <- NA
#deciding that a fair game will result is, on average winning or loosing between $0 and $1000
while(!(fair_mean %in% -900:1100)){
middle <- (min + max) / 2
fair_mean <- mean(replicate(100, unfair_game(num_bets = 100000, p1 = middle)))
#if the mean is too small - change the bounds to the midpoint and max, then take midpoint of those points
if(fair_mean <= -900) {
min <- middle
#if the mean is too big - change the bounds to the min and midpoint, then take midpoint of those points
} else if(fair_mean >= 1100) {
max <- middle
} else {
fair_percentage <- middle
break
}
}
library(boot)
?boot.ci
boot.ci
boot_ci <- function(data, fun) {
resample <- function(data) {
sample(data, length(data), replace = T)
}
statistic <- replicate(1000, fun(resample(data)))
quantile(statistic, probs = c(.025,.975))
}
18/38
data <- 1:4
boot_ci(data)
boot_ci(data, mean)
probs <- seq(.48,.50,.005)
probs
probs <- seq(.48,.50,.0025)
probs
probs <- seq(.48,.50,.001)
probs
probs <- seq(.48,.50,.0001)
probs
i in seq
seq_along(probs)
probs
probs <- seq(.48,.50,.0001)
for(i in probs) {
fair_mean <- mean(replicate(100, unfair_game(num_bets = 100000, p1 = i)))
}
probs <- seq(.48,.50,.0001)
for(i in probs) {
print(i)
}
probs <- seq(.48,.50,.001)
probs <- seq(.48,.50,.001)
for(i in probs) {
mean(replicate(50, unfair_game(num_bets = 100000, p1 = .49)))
}
unfair_game <- function(num_bets, p1 = .48, increase = .01){
bank <- rep(NA, num_bets+1)
bank[1] = 100
chance = p1
for(i in 1:num_bets+1) {
sample1 <-rbinom(1,1,chance)
bank[i] <- bank[i-1] + sample1*(200) - 100
if(chance < 1 & sample1 == 1) {
chance <- chance + increase
} else if (chance < 1 & sample1 == 0) {
chance <- p1
}
}
return(bank[num_bets+1])
}
probs <- seq(.48,.50,.01)
for(i in probs) {
mean(replicate(50, unfair_game(num_bets = 100000, p1 = .49)))
}
probs <- seq(.48,.50,.01)
fair_mean<-rep(NA, length(seq))
for(i in 1:length(seq)) {
fair_mean <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])))
}
fair_mean
probs <- seq(.48,.50,.01)
fair_mean<-rep(NA, length(seq))
for(i in 1:length(seq)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])))
}
fair_mean
probs
probs <- seq(.48,.50,.01)
fair_mean<-rep(NA, length(probs))
for(i in 1:length(probs)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])))
}
fair_mean
probs <- seq(.48,.50, .00025)
fair_mean<-rep(NA, length(probs))
for(i in 1:length(probs)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])))
}
probs <- seq(.48,.50, .00025)
fair_mean<-rep(NA, length(probs))
for(i in 1:length(probs)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])))
print(fair_mean[i])
}
mean(replicate(100, unfair_game(num_bets = 100000, p1 = .50)))
mean(replicate(100, unfair_game(num_bets = 100000, p1 = .49)))
mean(replicate(100, unfair_game(num_bets = 100000, p1 = .49)))
mean(replicate(100, unfair_game(num_bets = 100000, p1 = .485)))
mean(replicate(100, unfair_game(num_bets = 100000, p1 = .491)))
mean(replicate(100, unfair_game(num_bets = 100000, p1 = .491)), na.rm = TRUE)
unfair_game <- function(num_bets, p1 = .48, increase = .01){
bank <- rep(NA, num_bets+1)
bank[1] = 100
chance = p1
for(i in 2:num_bets+1) {
sample1 <-rbinom(1,1,chance)
bank[i] <- bank[i-1] + sample1*(200) - 100
if(chance < 1 & sample1 == 1) {
chance <- chance + increase
} else if (chance < 1 & sample1 == 0) {
chance <- p1
}
}
return(bank[num_bets+1])
}
probs <- seq(.48,.50, .00025)
fair_mean<-rep(NA, length(probs))
for(i in 1:length(probs)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])))
print(fair_mean[i]); print(i);
}
probs <- seq(.48,.50, .00025)
fair_mean<-rep(NA, length(probs))
for(i in 1:length(probs)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])),na.rm=TRUE)
print(fair_mean[i]); print(i);
}
fair_mean<-rep(NA, length(probs))
probs <- seq(.48,.50, .00025)
unfair_game(num_bets = 5000, p1 = probs[i])
unfair_game <- function(num_bets, p1 = .48, increase = .01){
bank <- rep(NA, num_bets+1)
bank[1] = 100
chance = p1
for(i in 2:num_bets) {
sample1 <-rbinom(1,1,chance)
bank[i] <- bank[i-1] + sample1*(200) - 100
if(chance < 1 & sample1 == 1) {
chance <- chance + increase
} else if (chance < 1 & sample1 == 0) {
chance <- p1
}
}
return(bank[num_bets])
}
unfair_game(num_bets = 5000, p1 = probs[i]))
unfair_game(num_bets = 5000, p1 = probs[i])
probs <- seq(.48,.50, .00025)
fair_mean<-rep(NA, length(probs))
for(i in 1:length(probs)) {
fair_mean[i] <- mean(replicate(100, unfair_game(num_bets = 5000, p1 = probs[i])),na.rm=TRUE)
print(fair_mean[i]); print(i);
}
fair_mean
min <- .01
max <- .02
fair_mean <- NA
#deciding that a fair game will result is, on average winning or loosing between $0 and $1000
while(!(fair_mean %in% -900:1100)){
middle <- (min + max) / 2
fair_mean <- mean(replicate(100, unfair_game(num_bets = 100000, increase = middle)))
#if the mean is too small - change the bounds to the midpoint and max, then take midpoint of those points
if(fair_mean <= -900) {
min <- middle
#if the mean is too big - change the bounds to the min and midpoint, then take midpoint of those points
} else if(fair_mean >= 1100) {
max <- middle
} else {
fair_increase <- middle
break
}
}
unfair_game(num_bets = 100000, increase = middle)
unfair_game(100)
unfair_game(100000, increase = middle)
unfair_game(num_bets = 100000, increase = middle)
while(!(fair_mean %in% -900:1100)){
middle <- (min + max) / 2
fair_mean <- mean(replicate(100, unfair_game(num_bets = 100000, increase = middle)))
#if the mean is too small - change the bounds to the midpoint and max, then take midpoint of those points
if(fair_mean <= -900) {
min <- middle
#if the mean is too big - change the bounds to the min and midpoint, then take midpoint of those points
} else if(fair_mean >= 1100) {
max <- middle
} else {
fair_increase <- middle
break
}
}
